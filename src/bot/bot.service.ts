import { Injectable } from '@nestjs/common';
import { Telegraf, Markup } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import questions from './questions';
import questionsTest2 from './question2';

@Injectable()
export class BotService {
  private bot: Telegraf;
  private userSessions: Record<number, any> = {};

  constructor(private configService: ConfigService) {
    const botToken = this.configService.get<string>('BOT_TOKEN');
    if (!botToken) {
      throw new Error('BOT_TOKEN is not defined in the environment variables.');
    }
    this.bot = new Telegraf(botToken);

    this.bot.start(async (ctx) => {
      const userName = ctx.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      await ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${userName}! –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:`,
        Markup.keyboard([['–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î', '–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î']]) // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
          .oneTime()
          .resize(),
      );
    });

    this.bot.on('text', async (ctx) => {
      const userId = ctx.from.id;
      const userText = ctx.message.text.toLowerCase();

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ—Å—Ç
      if (
        ['–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î', '–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î'].includes(userText)
      ) {
        if (!this.userSessions[userId]) {
          this.userSessions[userId] = {
            currentQuestion: 0,
            answers: {},
            testType:
              userText === '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–Ω–∞–µ—Ç–µ –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î'
                ? '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–Ω–∞–µ—Ç–µ –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î'
                : '–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î', // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞
          };
          return this.sendQuestion(ctx);
        }
      }

      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

      if (this.userSessions[userId]) {
        const session = this.userSessions[userId];
        const currentTest =
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          session.testType === '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î'
            ? questions
            : questionsTest2;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        const currentQuestion = currentTest[session.currentQuestion];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        session.answers[currentQuestion.text] = ctx.message.text;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        session.currentQuestion++;

        // –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (session.currentQuestion >= currentTest.length) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          if (session.testType === '–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î') {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            const yesCount = Object.values(session.answers).filter(
              (answer) => (answer as string).toLowerCase() === '–¥–∞',
            ).length;
            await this.sendTest2Result(ctx, yesCount); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
            await ctx.reply(
              '–ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞—Å—Ç–∞–≤–∏–ª –≤–∞—Å –∑–∞–¥—É–º–∞—Ç—å—Å—è, —É–≤–µ—Ä–µ–Ω–∞: –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É –º–µ–Ω—è –≤ —Ç–≥-–∫–∞–Ω–∞–ª–µ:',
              Markup.inlineKeyboard([
                Markup.button.url(
                  '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                  'https://t.me/softPower_yoga',
                ),
              ]),
            );
          }
          delete this.userSessions[userId];
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        return this.sendQuestion(ctx);
      }
    });

    this.bot.launch().then(() => {
      console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    });

    process.once('SIGINT', () => this.bot.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
  }

  private async sendQuestion(ctx) {
    const userId = ctx.from.id;
    const session = this.userSessions[userId];

    if (!session) return;

    const currentTest =
      session.testType === '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î'
        ? questions
        : questionsTest2;

    const question = currentTest[session.currentQuestion];
    const keyboard = Markup.keyboard(question.options).oneTime().resize();

    await ctx.reply(question.text, keyboard);
  }

  private async sendTest2Result(ctx, yesCount) {
    let resultMessage = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ "–î–∞": ${yesCount}\n\n`;

    if (yesCount >= 0 && yesCount <= 3) {
      resultMessage +=
        'üîπ 0‚Äì3 ¬´–î–∞¬ª ‚Äì –í–µ—Ä–æ—è—Ç–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –Ω–æ –∑–Ω–∞–Ω–∏—è –æ —Ç–∞–∑–æ–≤–æ–º –¥–Ω–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã. –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ.';
    } else if (yesCount >= 4 && yesCount <= 7) {
      resultMessage +=
        'üîπ 4‚Äì7 ¬´–î–∞¬ª ‚Äì –í–æ–∑–º–æ–∂–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–µ–ª–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—é –∏–ª–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—é –º—ã—à—Ü —Ç–∞–∑–æ–≤–æ–≥–æ –¥–Ω–∞.';
    } else if (yesCount >= 8 && yesCount <= 12) {
      resultMessage +=
        'üîπ 8‚Äì12 ¬´–î–∞¬ª ‚Äì –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–∏. –í–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.';
    } else if (yesCount >= 13) {
      resultMessage +=
        'üîπ 13+ ¬´–î–∞¬ª ‚Äì –í–µ—Ä–æ—è—Ç–Ω—ã —Å–µ—Ä—å—ë–∑–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è –≤—Ä–∞—á–∞ –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.';
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    await ctx.reply(resultMessage, Markup.removeKeyboard());

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∫—É–ø–∏—Ç—å –≥–∞–π–¥
    await ctx.reply(
      '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–∏ –º—ã—à—Ü —Ç–∞–∑–æ–≤–æ–≥–æ –¥–Ω–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—à –≥–∞–π–¥:',
      Markup.inlineKeyboard([
        Markup.button.url('–ö—É–ø–∏—Ç—å –≥–∞–π–¥', 'https://t.me/k_nazarovaaa'), // –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é
      ]),
    );
  }
}
