import { Injectable } from '@nestjs/common';
import { Telegraf, Markup, Context } from 'telegraf';
import { Update } from 'telegraf/typings/core/types/typegram';
import { ConfigService } from '@nestjs/config';
import { questions } from './questions';
import { questionsTest2 } from './question2';

interface UserSession {
  currentQuestion: number;
  answers: Record<string, string>;
  testType: '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î' | '–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î';
}

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π match
interface CustomContext extends Context<Update> {
  match: RegExpMatchArray;
}

@Injectable()
export class BotService {
  private bot: Telegraf;
  private userSessions: Record<number, UserSession> = {};

  constructor(private configService: ConfigService) {
    const botToken = this.configService.get<string>('BOT_TOKEN');
    if (!botToken) {
      throw new Error('BOT_TOKEN is not defined in the environment variables.');
    }
    this.bot = new Telegraf(botToken);

    this.setupHandlers().catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞:', error);
    });

    process.once('SIGINT', () => this.bot.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
  }

  private async setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.start(async (ctx: Context) => {
      const userName = ctx.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      await ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${userName}! –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î', 'test1')],
          [Markup.button.callback('–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î', 'test2')],
        ]),
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
    this.bot.action('test1', async (ctx: Context) => {
      const userId = ctx.from?.id;
      if (!userId) return;

      this.userSessions[userId] = {
        currentQuestion: 0,
        answers: {},
        testType: '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î',
      };
      await this.sendQuestion(ctx);
    });

    this.bot.action('test2', async (ctx: Context) => {
      const userId = ctx.from?.id;
      if (!userId) return;

      this.userSessions[userId] = {
        currentQuestion: 0,
        answers: {},
        testType: '–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î',
      };
      await this.sendQuestion(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    this.bot.action(/.*/, async (ctx: CustomContext) => {
      const userId = ctx.from?.id;
      if (!userId || !this.userSessions[userId]) return;

      const userAnswer = ctx.match[0]; // –¢–µ–ø–µ—Ä—å TypeScript –∑–Ω–∞–µ—Ç, —á—Ç–æ ctx.match —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const session = this.userSessions[userId];

      const currentTest =
        session.testType === '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î'
          ? questions
          : questionsTest2;
      const currentQuestion = currentTest[session.currentQuestion];

      session.answers[currentQuestion.text] = userAnswer;
      session.currentQuestion++;

      // –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
      if (session.currentQuestion >= currentTest.length) {
        if (session.testType === '–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î') {
          const yesCount = Object.values(session.answers).filter(
            (answer) => answer.toLowerCase() === '–¥–∞',
          ).length;
          await this.sendTest2Result(ctx, yesCount);
        } else {
          await ctx.reply(
            '–ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞—Å—Ç–∞–≤–∏–ª –≤–∞—Å –∑–∞–¥—É–º–∞—Ç—å—Å—è, —É–≤–µ—Ä–µ–Ω–∞: –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É –º–µ–Ω—è –≤ —Ç–≥-–∫–∞–Ω–∞–ª–µ:',
            Markup.inlineKeyboard([
              [
                Markup.button.url(
                  '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                  'https://t.me/softPower_yoga',
                ),
              ],
            ]),
          );

          await ctx.reply(
            '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç?',
            Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î',
                  'test1',
                ),
              ],
              [Markup.button.callback('–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î', 'test2')],
            ]),
          );
        }
        delete this.userSessions[userId];
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
      await this.sendQuestion(ctx);
    });

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try {
      await this.bot.launch();
      console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    }
  }

  private async sendQuestion(ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId || !this.userSessions[userId]) return;

    const session = this.userSessions[userId];
    const currentTest =
      session.testType === '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î'
        ? questions
        : questionsTest2;
    const question = currentTest[session.currentQuestion];

    const keyboard = Markup.inlineKeyboard(
      question.options.map((option) => [
        Markup.button.callback(option, option),
      ]),
    );

    await ctx.reply(question.text, keyboard);
  }

  private async sendTest2Result(ctx: Context, yesCount: number) {
    let resultMessage = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ "–î–∞": ${yesCount}\n\n`;

    if (yesCount >= 0 && yesCount <= 3) {
      resultMessage +=
        'üîπ 0‚Äì3 ¬´–î–∞¬ª ‚Äì –í–µ—Ä–æ—è—Ç–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, –Ω–æ –∑–Ω–∞–Ω–∏—è –æ —Ç–∞–∑–æ–≤–æ–º –¥–Ω–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã. –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ.';
    } else if (yesCount >= 4 && yesCount <= 7) {
      resultMessage +=
        'üîπ 4‚Äì7 ¬´–î–∞¬ª ‚Äì –í–æ–∑–º–æ–∂–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–µ–ª–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—é –∏–ª–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—é –º—ã—à—Ü —Ç–∞–∑–æ–≤–æ–≥–æ –¥–Ω–µ.';
    } else if (yesCount >= 8 && yesCount <= 12) {
      resultMessage +=
        'üîπ 8‚Äì12 ¬´–î–∞¬ª ‚Äì –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–∏. –í–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.';
    } else if (yesCount >= 13) {
      resultMessage +=
        'üîπ 13+ ¬´–î–∞¬ª ‚Äì –í–µ—Ä–æ—è—Ç–Ω—ã —Å–µ—Ä—å—ë–∑–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è –≤—Ä–∞—á–∞ –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.';
    }

    await ctx.reply(resultMessage, Markup.removeKeyboard());

    try {
      await ctx.replyWithPhoto(
        {
          source: './src/assets/card.jpg',
        },
        {
          caption:
            '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –¥–∏—Å—Ñ—É–Ω–∫—Ü–∏–∏ –º—ã—à—Ü —Ç–∞–∑–æ–≤–æ–≥–æ –¥–Ω–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—à –≥–∞–π–¥:',
          ...Markup.inlineKeyboard([
            [Markup.button.url('–ö—É–ø–∏—Ç—å –≥–∞–π–¥', 'https://t.me/k_nazarovaaa')],
          ]),
        },
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', error);
      await ctx.reply(
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }

    await ctx.reply(
      '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç?',
      Markup.inlineKeyboard([
        [Markup.button.callback('–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ú–¢–î', 'test1')],
        [Markup.button.callback('–¢–µ—Å—Ç –Ω–∞ –î–ú–¢–î', 'test2')],
      ]),
    );
  }
}
